/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <string.h>
#include "platform.h"
#include "xil_printf.h"
#include "xbasic_types.h"
#include "xparameters.h"
#include "sleep.h"
#include "xtime_l.h"
#include <arm_neon.h>

#define REGISTER_NUMBER 4
#define BYTES_TO_BE_ENCRYPTED 16

Xuint32 *plain_text_base_addr = (Xuint32 *) 0x43C00000;
Xuint32 *key_base_addr = (Xuint32 *)0x43C00010;
Xuint32 *cypher_text_base_addr = (Xuint32 *)0x43C00030;

uint8x16_t cypher, plain;

void Encrypt_AES(char* plaintext, const char* key, char* ciphertext){
	for(int i = 0; i < REGISTER_NUMBER; i++){
		*(plain_text_base_addr+i) = *((Xuint32*)(plaintext)+i);
		*(key_base_addr+i) = *((Xuint32*)(key)+i);
	}

	xil_printf("Waiting for encryption...\n\r");

	xil_printf("Waiting for encryption...\n\r");xil_printf("Waiting for encryption...\n\r");xil_printf("Waiting for encryption...\n\r");

	for(int i = 0; i < REGISTER_NUMBER; i++){
		*((Xuint32*)(ciphertext)+i) = *(cypher_text_base_addr+i);
	}

//	for(int i = 0; i < 16; i++)
//		ciphertext[i] = ciphertext[i] ^ plaintext[i];
}

void print_results(char plaintext[], const char key[], char ciphertext[]){
	xil_printf("\r\nPlaintext: ");
	for (int i = 0; i < BYTES_TO_BE_ENCRYPTED; i++)
		xil_printf("%x ", plaintext[i]);
	xil_printf("\n\r");

	xil_printf("Key: ");
	for (int i = 0; i < BYTES_TO_BE_ENCRYPTED; i++)
		xil_printf("%x ", key[i]);
	xil_printf("\n\r");

	xil_printf("Ciphertext: ");
	for (int i = 0; i < BYTES_TO_BE_ENCRYPTED; i++)
		xil_printf("%x ", ciphertext[i]);
	xil_printf("\n\r");
}

int main()
{
    init_platform();

    print("\n\rInitialize program.\n\r");

//  char plaintext[16] = { 0x84, 0xBE, 0x23, 0x29, 0xAE, 0xD6, 0x6C, 0xE1,
//                                          0xF1, 0x49, 0x90, 0x52, 0xEB, 0xE9, 0xBB, 0xF1 };
//	const char key[16] = { 0x3C, 0xDB, 0xA6, 0xB3, 0x99, 0x3E, 0x0C, 0x87,
//								0x1C, 0x0D, 0x5E, 0x24, 0xDE, 0x47, 0xB7, 0x06 };
//	char ciphertext[16] = { 0xE3, 0x82, 0xE4, 0xBF, 0xE0, 0x20, 0xDD, 0xE6,
//									   0xA6, 0xC8, 0xBC, 0x63, 0xED, 0x1F, 0x04, 0x9C };
//
//	// Second set
//	char plaintext[16] = { 0xC8, 0x4D, 0x12, 0xB3, 0xA6, 0x8B, 0xB4, 0x37,
//									  0xD5, 0xA0, 0x31, 0xF1, 0xF2, 0x53, 0x80, 0x9 };
//	const char key[16] = { 0xFC, 0xCB, 0xD4, 0x5D, 0x3B, 0x45, 0xF5, 0x96,
//								0x0A, 0x89, 0x0D, 0x13, 0x32, 0xAE, 0xDB, 0x1C };
//	char ciphertext[16] = { 0xF2, 0x74, 0xC5, 0x59, 0x73, 0xEE, 0x5A, 0xDB,
//									   0xF2, 0xF0, 0x7F, 0xE5, 0x95, 0x66, 0x7A, 0x32 };
//
//	// Third set
//	char plaintext[16] = { 0xEE, 0x50, 0x9A, 0x20, 0xFD, 0x36, 0x78, 0x40,
//									  0xF6, 0x32, 0x49, 0x12, 0xDC, 0x49, 0x7D, 0x9E };
//	const char key[16] = { 0xF2, 0x14, 0x4F, 0xAD, 0xD0, 0x66, 0x40, 0x44,
//								0xB7, 0x30, 0xC4, 0x6B, 0x22, 0xA1, 0x3B, 0x32 };
//	char ciphertext[16] = { 0x93, 0xD3, 0x96, 0x18, 0x83, 0x63, 0xA5, 0x14,
//									   0xBD, 0xDC, 0xCA, 0x10, 0xEA, 0xEF, 0x9A, 0x0E };
//
//	// Fourth set
//	char plaintext[16] = { 0x9D, 0x91, 0x22, 0xF6, 0xDA, 0x1F, 0x8B, 0xE1,
//									  0x02, 0x99, 0xCA, 0xB0, 0x49, 0x9D, 0x72, 0xB9 };
//	const char key[16] = { 0xC5, 0x7E, 0x80, 0x2C, 0x80, 0xE9, 0xD5, 0x99,
//								0xCC, 0x9E, 0xAB, 0x2D, 0x66, 0x7B, 0xF5, 0x3 };
//	char ciphertext[16] = { 0x42, 0x3A, 0xD4, 0xB7, 0xBB, 0x99, 0xC5, 0x2E,
//									   0x7F, 0xD8, 0x8A, 0x37, 0x79, 0xD8, 0x4D, 0xE2 };
//
//	// Fifth set
//	char plaintext[16] = { 0x7E, 0xD6, 0x14, 0xBF, 0x66, 0x8E, 0xDC, 0x2D,
//									  0x49, 0x57, 0xEF, 0x83, 0x8F, 0x69, 0xFF, 0x61 };
//	const char key[16] = { 0x1E, 0xD1, 0xCD, 0x61, 0x72, 0x16, 0x9C, 0x9D,
//								0xF0, 0x1D, 0xE6, 0x72, 0x77, 0x4A, 0x4F, 0x84 };
//  char ciphertext[16] = { 0xB4, 0x91, 0x5F, 0x6A, 0x56, 0x5E, 0xA0, 0x80,
//                                           0x88, 0x0D, 0x5F, 0xFD, 0x29, 0x06, 0xFF, 0x9 };

//	// Initial set
//    const char key[16] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
//                                  0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70 };
//
//    char plain_text[16] = { 0x74, 0x68, 0x69, 0x73, 0x69, 0x73, 0x74, 0x68,
//                            0x65, 0x70, 0x6C, 0x61, 0x69, 0x6E, 0x74, 0x78 };

    char plaintext[16] = { 0x32, 0x43, 0xF6, 0xA8,
							0x88, 0x5A, 0x30, 0x8D,
							0x31, 0x31, 0x98, 0xA2,
							0xE0, 0x37, 0x07, 0x34 };
    const char key[16] = { 0x2B, 0x7E, 0x15, 0x16,
            0x28, 0xAE, 0xD2, 0xA6,
            0xAB, 0xF7, 0x15, 0x88,
            0x09, 0xCF, 0x4F, 0x3C };
	char ciphertext[16];

	Encrypt_AES(plaintext, key, ciphertext);
	xil_printf("Printing arrays:\n\r");
	print_results(plaintext, key, ciphertext);

//Printing registers
//	xil_printf("printing registers\n\r");
//	for(int i=0;i<16;i++){
//		xil_printf("%x ",*((char *)plain_text_base_addr+i));
//	}
//	xil_printf("\n\r");
//	for(int i=0;i<16;i++){
//		xil_printf("%x ",*((char *)key_base_addr+i));
//	}
//	xil_printf("\n\r");
//	for(int i=0;i<16;i++){
//		xil_printf("%x ",*((char *)cypher_text_base_addr+i));
//	}
//	xil_printf("\n\r");

	Encrypt_AES(ciphertext, key, plaintext);
	print_results(ciphertext, key, plaintext);

    cleanup_platform();
    return 0;
}
